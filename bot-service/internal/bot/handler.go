package bot

import (
	"context"
	"crypto/sha256"
	"fmt"
	"google.golang.org/protobuf/types/known/timestamppb"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Task-bot/bot-service/internal/generated/task"
	"github.com/Task-bot/bot-service/internal/generated/user"
	tgbot "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func MakeButtons() tgbot.InlineKeyboardMarkup {
	return tgbot.NewInlineKeyboardMarkup(
		[]tgbot.InlineKeyboardButton{tgbot.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "add_task")},
		[]tgbot.InlineKeyboardButton{tgbot.NewInlineKeyboardButtonData("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", "show_tasks")},
		[]tgbot.InlineKeyboardButton{tgbot.NewInlineKeyboardButtonData("(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "plan")},
		[]tgbot.InlineKeyboardButton{tgbot.NewInlineKeyboardButtonData("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏", "update_progress")},
		[]tgbot.InlineKeyboardButton{tgbot.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "delete_task")},
	)
}

func CreateTask(bot *tgbot.BotAPI, message *tgbot.Message, taskClient task.TaskServiceClient, userClient user.UserServiceClient) bool {
	tgUserId := message.From.ID
	text := message.Text
	state, exists := userTaskStates[tgUserId]
	if exists {
		switch state.Step {
		case 1:
			state.TaskName = text
			state.Step = 2
			userTaskStates[tgUserId] = state

			inlineKeyboard := tgbot.NewInlineKeyboardMarkup([]tgbot.InlineKeyboardButton{
				tgbot.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel_task"),
			})

			msg := tgbot.NewMessage(message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
			msg.ReplyMarkup = inlineKeyboard
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
			}
			return true

		case 2:
			loc, _ := time.LoadLocation("Europe/Moscow")
			deadline, err := time.ParseInLocation("2006-01-02 15:04", text, loc)
			if err != nil || deadline.Before(time.Now().In(loc)) {
				errorMsg := "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
				if err == nil {
					errorMsg = "–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑"
				}

				msg := tgbot.NewMessage(message.Chat.ID, errorMsg)
				inlineKeyboard := tgbot.NewInlineKeyboardMarkup([]tgbot.InlineKeyboardButton{
					tgbot.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel_task"),
				})
				msg.ReplyMarkup = inlineKeyboard
				_, errSend := bot.Send(msg)
				if errSend != nil {
					log.Printf("Failed to send message: %v", errSend)
				}
				return true
			}

			state.Deadline = deadline.UTC()
			state.Step = 3
			userTaskStates[tgUserId] = state

			inlineKeyboard := tgbot.NewInlineKeyboardMarkup([]tgbot.InlineKeyboardButton{
				tgbot.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel_task"),
			})

			msg := tgbot.NewMessage(message.Chat.ID, "–ö–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (1-5, –≥–¥–µ 1 - —Å–ª–∞–±—ã–π, 5 - –≤—ã—Å–æ–∫–∏–π)?")
			msg.ReplyMarkup = inlineKeyboard
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
			}
			return true

		case 3:
			priority, err := strconv.Atoi(text)
			if err != nil || priority < 1 || priority > 5 {
				msg := tgbot.NewMessage(message.Chat.ID, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")
				inlineKeyboard := tgbot.NewInlineKeyboardMarkup([]tgbot.InlineKeyboardButton{
					tgbot.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel_task"),
				})
				msg.ReplyMarkup = inlineKeyboard
				_, errSend := bot.Send(msg)
				if errSend != nil {
					log.Printf("Failed to send message: %v", errSend)
				}
				return true
			}

			state.Priority = priority
			state.Step = 4
			userTaskStates[tgUserId] = state
			tgUserIdBytes := []byte(strconv.FormatInt(tgUserId, 10))

			hash := sha256.New()
			hash.Write(tgUserIdBytes)
			hashedUserId := hash.Sum(nil)

			ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
			defer cancel()

			req := &user.GetUserRequest{TgUserId: hashedUserId}
			userGet, err := userClient.GetUser(ctx, req)
			if err != nil {
				log.Printf("Can't get user on task creating: %v", err)
				msg := tgbot.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
				_, errSend := bot.Send(msg)
				if errSend != nil {
					log.Printf("Failed to send message: %v", errSend)
					return true
				}
				return true
			}
			taskRequest := &task.CreateTaskRequest{
				UserId:   userGet.Id,
				TaskText: state.TaskName,
				Deadline: timestamppb.New(state.Deadline),
				Priority: int32(state.Priority),
			}

			ctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)
			defer cancel()
			_, err = taskClient.CreateTask(ctx, taskRequest)
			if err != nil {
				msg := tgbot.NewMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
				inlineKeyboard := tgbot.NewInlineKeyboardMarkup([]tgbot.InlineKeyboardButton{
					tgbot.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel_task"),
				})
				state.Step = 1
				msg.ReplyMarkup = inlineKeyboard
				_, errSend := bot.Send(msg)
				if errSend != nil {
					log.Printf("Failed to send message: %v", errSend)
				}
				return true
			}
			inlineKeyboard := MakeButtons()
			msg := tgbot.NewMessage(message.Chat.ID, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
			msg.ReplyMarkup = inlineKeyboard
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
			}

			delete(userTaskStates, tgUserId)
			return true
		}
	}
	return false
}

func UpdateTask(bot *tgbot.BotAPI, message *tgbot.Message, taskClient task.TaskServiceClient) bool {
	if state, exists := userTaskProgressUpdateStates[message.From.ID]; exists && state.Step == 1 {
		progress, err := strconv.Atoi(message.Text)
		if err != nil || progress < 0 || progress > 100 {
			_, errSend := bot.Send(tgbot.NewMessage(message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
			}
			return true
		}

		updateReq := &task.UpdateTaskStatusRequest{
			TaskId:   state.TaskId,
			Progress: int32(progress),
		}
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		_, err = taskClient.UpdateTaskStatus(ctx, updateReq)
		if err != nil {
			log.Printf("Failed to update progress: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
			}
			return true
		}
		inlineKeyboard := MakeButtons()

		msg := tgbot.NewMessage(message.Chat.ID, "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
		}
		delete(userTaskProgressUpdateStates, message.From.ID)
		return true
	}
	return false
}

func handleMessage(bot *tgbot.BotAPI, message *tgbot.Message, taskClient task.TaskServiceClient, userClient user.UserServiceClient) {
	tgUserId := message.From.ID
	text := message.Text

	tgUserIdBytes := []byte(strconv.FormatInt(tgUserId, 10))

	hash := sha256.New()
	hash.Write(tgUserIdBytes)
	hashedUserId := hash.Sum(nil)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	req := &user.GetUserRequest{TgUserId: hashedUserId}

	userGet, err := userClient.GetUser(ctx, req)
	if err != nil {
		newUser := &user.CreateUserRequest{
			TgUserId: hashedUserId,
			Username: message.From.UserName,
		}
		_, errCreate := userClient.CreateUser(ctx, newUser)
		if errCreate != nil {
			log.Printf("Failed to create user: %v", errCreate)
			return
		}

		log.Printf("User created: %v", newUser)
	} else {
		log.Printf("User found: %v", userGet)
	}
	res := CreateTask(bot, message, taskClient, userClient)
	if res {
		return
	}
	res = UpdateTask(bot, message, taskClient)
	if res {
		return
	}
	if text == "/start" {
		msg := tgbot.NewMessage(message.Chat.ID, fmt.Sprintf(
			"üëã –ü—Ä–∏–≤–µ—Ç, %s! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á* üìå\n\n"+
				"‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"+
				"‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ üïí\n"+
				"üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç üìä\n"+
				"ü§ñ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö ‚è≥\n"+
				"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞!\n\n"+
				"üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è",
			message.From.FirstName,
		))
		msg.ParseMode = "Markdown"

		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message after /start: %v", errSend)
		}
		inlineKeyboard := MakeButtons()
		msg = tgbot.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend = bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message with buttons: %v", errSend)
		}
		return
	} else {
		msg := tgbot.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start")
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
		}
		return
	}
}

func handleCallback(bot *tgbot.BotAPI, callback *tgbot.CallbackQuery, taskClient task.TaskServiceClient, userClient user.UserServiceClient) {
	tgUserId := callback.From.ID
	switch callback.Data {
	case "add_task":
		userTaskStates[tgUserId] = &TaskCreationState{Step: 1}
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
		}
		return
	case "cancel_task":
		delete(userTaskStates, tgUserId)
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
		}
		return
	case "show_tasks":
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		tgUserIdBytes := []byte(strconv.FormatInt(tgUserId, 10))

		hash := sha256.New()
		hash.Write(tgUserIdBytes)
		hashedUserId := hash.Sum(nil)
		req := &user.GetUserRequest{TgUserId: hashedUserId}
		userGet, err := userClient.GetUser(ctx, req)
		if err != nil {
			log.Printf("Can't get user on show tasks: %v", err)
			msg := tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}
		taskReq := &task.GetTaskRequest{UserId: userGet.Id}
		taskResponse, err := taskClient.GetTasks(ctx, taskReq)
		if err != nil {
			log.Printf("Failed to fetch tasks: %v", err)
			msg := tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}
		if len(taskResponse.Tasks) == 0 {
			msg := tgbot.NewMessage(callback.Message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		var taskList string
		loc, _ := time.LoadLocation("Europe/Moscow")

		for i, t := range taskResponse.Tasks {
			emoji := getTaskProgressEmoji(t.Progress)
			deadlineTime := t.Deadline.AsTime().In(loc)
			overdueMsg := ""

			if deadlineTime.Before(time.Now().In(loc)) {
				if t.Progress < 100 {
					overdueMsg = " ‚ùå –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω"
				} else {
					overdueMsg = " –ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —ç—Ç–∏–º –¥–µ–ª–æ–º üéâ"
				}
			}

			taskList += fmt.Sprintf("%d. %s –î–µ–¥–ª–∞–π–Ω: [%s] %d%% %s%s\n",
				i+1, t.TaskText, deadlineTime.Format("02.01.2006 15:04"), t.Progress, emoji, overdueMsg)
		}

		msg := tgbot.NewMessage(callback.Message.Chat.ID, taskList)
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	case "plan":
		return
	case "update_progress":
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		tgUserIdBytes := []byte(strconv.FormatInt(tgUserId, 10))

		hash := sha256.New()
		hash.Write(tgUserIdBytes)
		hashedUserId := hash.Sum(nil)
		req := &user.GetUserRequest{TgUserId: hashedUserId}
		userGet, err := userClient.GetUser(ctx, req)
		if err != nil {
			log.Printf("Can't get user on show tasks: %v", err)
			msg := tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
			_, errSend := bot.Send(msg)
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}
		tasksReq := &task.GetTaskRequest{UserId: userGet.Id}
		tasksResp, err := taskClient.GetTasks(ctx, tasksReq)
		if err != nil {
			log.Printf("Failed to fetch tasks: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		if len(tasksResp.Tasks) == 0 {
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		timezone, err := time.LoadLocation("Europe/Moscow")
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: %v", err)
		}
		keyboard := tgbot.NewInlineKeyboardMarkup()
		now := time.Now().In(timezone)

		for _, t := range tasksResp.Tasks {
			if t.Deadline != nil {
				deadline := t.Deadline.AsTime().In(timezone)
				if deadline.Before(now) {
					continue
				}
			}

			button := tgbot.NewInlineKeyboardButtonData(t.TaskText, "task_"+strconv.FormatInt(t.TaskId, 10))
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbot.InlineKeyboardButton{button})
		}
		if len(keyboard.InlineKeyboard) == 0 {
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
		msg.ReplyMarkup = keyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	case "delete_task":
		tgUserIdBytes := []byte(strconv.FormatInt(tgUserId, 10))

		hash := sha256.New()
		hash.Write(tgUserIdBytes)
		hashedUserId := hash.Sum(nil)

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		userReq := &user.GetUserRequest{TgUserId: hashedUserId}
		userGet, err := userClient.GetUser(ctx, userReq)
		if err != nil {
			log.Printf("Error fetching user: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		taskReq := &task.GetTaskRequest{UserId: userGet.Id}
		taskList, err := taskClient.GetTasks(ctx, taskReq)
		if err != nil {
			log.Printf("Error fetching tasks: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		if len(taskList.Tasks) == 0 {
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		var taskButtons [][]tgbot.InlineKeyboardButton
		for _, t := range taskList.Tasks {
			taskButtons = append(taskButtons, []tgbot.InlineKeyboardButton{
				tgbot.NewInlineKeyboardButtonData(t.TaskText, "delete_"+strconv.FormatInt(t.TaskId, 10)),
			})
		}

		inlineKeyboard := tgbot.NewInlineKeyboardMarkup(taskButtons...)
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	case "cancel_delete":
		inlineKeyboard := MakeButtons()
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	}

	if strings.HasPrefix(callback.Data, "task_") {
		taskID := strings.TrimPrefix(callback.Data, "task_")
		num, err := strconv.ParseInt(taskID, 10, 64)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: %v", err)
			return
		}
		userTaskProgressUpdateStates[callback.From.ID] = &TaskProgressUpdateState{
			TaskId: num,
			Step:   1,
		}

		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ –≤ % (0-100):")
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
	}
	if strings.HasPrefix(callback.Data, "delete_") {
		taskIdStr := strings.TrimPrefix(callback.Data, "delete_")
		taskId, err := strconv.ParseInt(taskIdStr, 10, 64)
		if err != nil {
			log.Printf("Invalid task ID: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		inlineKeyboard := tgbot.NewInlineKeyboardMarkup(
			[]tgbot.InlineKeyboardButton{
				tgbot.NewInlineKeyboardButtonData("‚úÖ –î–∞", "confirm_delete_"+strconv.FormatInt(taskId, 10)),
				tgbot.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_delete"),
			},
		)

		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	}
	if strings.HasPrefix(callback.Data, "confirm_delete_") {
		taskIdStr := strings.TrimPrefix(callback.Data, "confirm_delete_")
		taskId, err := strconv.ParseInt(taskIdStr, 10, 64)
		if err != nil {
			log.Printf("Invalid task ID: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		delReq := &task.DeleteTaskRequest{TaskId: taskId}
		_, err = taskClient.DeleteTask(ctx, delReq)
		if err != nil {
			log.Printf("Error deleting task: %v", err)
			_, errSend := bot.Send(tgbot.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"))
			if errSend != nil {
				log.Printf("Failed to send message: %v", errSend)
				return
			}
			return
		}
		inlineKeyboard := MakeButtons()
		msg := tgbot.NewMessage(callback.Message.Chat.ID, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
		msg.ReplyMarkup = inlineKeyboard
		_, errSend := bot.Send(msg)
		if errSend != nil {
			log.Printf("Failed to send message: %v", errSend)
			return
		}
		return
	}
}

func getTaskProgressEmoji(progress int32) string {
	switch {
	case progress < 25:
		return "ü•µ"
	case progress < 50:
		return "ü•∂"
	case progress < 75:
		return "üò∂‚Äçüå´"
	case progress < 100:
		return "üòâ"
	default:
		return "‚úÖ"
	}
}
